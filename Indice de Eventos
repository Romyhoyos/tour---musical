# Definir una clase Evento para representar cada evento musical
class Evento:
    def __init__(self, nombre, artista, genero, ubicacion):
        self.nombre = nombre
        self.artista = artista
        self.genero = genero
        self.ubicacion = ubicacion

# Crear una lista de eventos
eventos = [
    Evento("Concierto 1", "Artista 1", "Género 1", "Ubicación 1"),
    Evento("Concierto 2", "Artista 2", "Género 2", "Ubicación 2"),
    Evento("Concierto 3", "Artista 3", "Género 1", "Ubicación 3"),
    # Agrega más eventos según sea necesario
]

# Mostrar los detalles de cada evento en el índice
for evento in eventos:
    print("Nombre del evento:", evento.nombre)
    print("Artista:", evento.artista)
    print("Género musical:", evento.genero)
    print("Ubicación:", evento.ubicacion)
    print("---------------------------")

# Crear una lista de eventos
eventos = [
    Evento("Concierto 1", "Artista 1", "Género 1", "Ubicación 1"),
    Evento("Concierto 2", "Artista 2", "Género 2", "Ubicación 2"),
    Evento("Concierto 3", "Artista 3", "Género 1", "Ubicación 3"),
    # Agrega más eventos según sea necesario
]

# Función de búsqueda de eventos
def buscar_eventos(filtro):
    resultados = []
    for evento in eventos:
        if filtro.lower() in evento.nombre.lower() or filtro.lower() in evento.genero.lower() or filtro.lower() in evento.artista.lower():
            resultados.append(evento)
    return resultados

def filtrar_eventos(ubicacion, horario):
    resultados = []
    for evento in eventos:
        if ubicacion.lower() in evento.ubicacion.lower() and horario.lower() in evento.horario.lower():
            resultados.append(evento)
    return resultados

filtro = input("Ingrese un nombre de evento, género o artista: ")
resultados_busqueda = buscar_eventos(filtro)
for evento in resultados_busqueda:
    print("Evento encontrado:")
    print("Nombre del evento:", evento.nombre)
    print("Artista:", evento.artista)
    print("Género musical:", evento.genero)
    print("Ubicación:", evento.ubicacion)
    print("---------------------------")

ubicacion_filtro = input("Ingrese una ubicación para filtrar (deje en blanco si no desea filtrar por ubicación): ")
horario_filtro = input("Ingrese un horario para filtrar (deje en blanco si no desea filtrar por horario): ")
resultados_filtrados = filtrar_eventos(ubicacion_filtro, horario_filtro)
for evento in resultados_filtrados:
    print("Evento filtrado:")
    print("Nombre del evento:")

import tkinter as tk
from tkinter import messagebox

# Definir la clase Evento como en los ejemplos anteriores

# Crear una lista de eventos con detalles de ubicación
eventos = [
    Evento("Concierto 1", "Artista 1", "Género 1", "Ubicación 1", (40.7128, -74.0060)),
    Evento("Concierto 2", "Artista 2", "Género 2", "Ubicación 2", (34.0522, -118.2437)),
    Evento("Concierto 3", "Artista 3", "Género 1", "Ubicación 3", (51.5074, -0.1278)),
    # Agrega más eventos según sea necesario
]

# Función para visualizar los eventos en un mapa
def visualizar_eventos_mapa():
    # Crear un objeto de mapa centrado en una ubicación inicial
    mapa = tk.Map(location=(40.7128, -74.0060), zoom_start=10)

    # Agregar marcadores de ubicación para cada evento en el mapa
    for evento in eventos:
        tk.Marker(
            location=evento.ubicacion,
            popup=f"<b>{evento.nombre}</b><br>Artista: {evento.artista}<br>Género: {evento.genero}"
        ).add_to(mapa)

    # Mostrar el mapa en una ventana emergente
    map_popup = tk.Tk()
    map_popup.title("Mapa de Eventos")
    map_popup.geometry("800x600")
    map_html = mapa.get_root().render()
    map_browser = tk.WebView(master=map_popup)
    map_browser.pack(fill=tk.BOTH, expand=tk.YES)
    map_browser.set_content(map_html)
    map_popup.mainloop()

import tkinter as tk
from tkinter import messagebox


# Función para mostrar los eventos y recibir las reseñas y calificaciones
def mostrar_eventos():
    ventana = tk.Tk()
    ventana.title("Tour Musical")
    
    for evento in eventos:
        frame = tk.Frame(ventana)
        frame.pack(pady=10)
        
        label_nombre = tk.Label(frame, text=evento.nombre, font=("Helvetica", 16))
        label_nombre.pack()
        
        label_artista = tk.Label(frame, text=f"Artista: {evento.artista}")
        label_artista.pack()
        
        label_genero = tk.Label(frame, text=f"Género: {evento.genero}")
        label_genero.pack()
        
        label_ubicacion = tk.Label(frame, text=f"Ubicación: {evento.ubicacion}")
        label_ubicacion.pack()
        
        rating_frame = tk.Frame(frame)
        rating_frame.pack(pady=10)
        
        label_rating = tk.Label(rating_frame, text="Calificación:")
        label_rating.pack(side=tk.LEFT)
        
        rating_var = tk.IntVar()
        
        def guardar_calificacion():
            rating = rating_var.get()
            messagebox.showinfo("Calificación Guardada", f"Has calificado '{evento.nombre}' con {rating} estrellas.")
        